# coding: utf-8

"""
    MÁV ELVIRA API

    Unofficial API for MÁV ELVIRA - Hungarian Railways (jegy.mav.hu)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class HavarianInfok(BaseModel):
    """
    HavarianInfok
    """ # noqa: E501
    aktualis_keses: Union[StrictFloat, StrictInt] = Field(description="Delay in minutes", alias="aktualisKeses")
    kesesi_ok: Optional[StrictStr] = Field(description="Delay reason", alias="kesesiOk")
    havaria_info: Optional[List[StrictStr]] = Field(alias="havariaInfo")
    uzleti_info: Optional[StrictStr] = Field(alias="uzletiInfo")
    keses_info: StrictStr = Field(description="Delay description", alias="kesesInfo")
    __properties: ClassVar[List[str]] = ["aktualisKeses", "kesesiOk", "havariaInfo", "uzletiInfo", "kesesInfo"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HavarianInfok from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if kesesi_ok (nullable) is None
        # and model_fields_set contains the field
        if self.kesesi_ok is None and "kesesi_ok" in self.model_fields_set:
            _dict['kesesiOk'] = None

        # set to None if havaria_info (nullable) is None
        # and model_fields_set contains the field
        if self.havaria_info is None and "havaria_info" in self.model_fields_set:
            _dict['havariaInfo'] = None

        # set to None if uzleti_info (nullable) is None
        # and model_fields_set contains the field
        if self.uzleti_info is None and "uzleti_info" in self.model_fields_set:
            _dict['uzletiInfo'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HavarianInfok from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "aktualisKeses": obj.get("aktualisKeses"),
            "kesesiOk": obj.get("kesesiOk"),
            "havariaInfo": obj.get("havariaInfo"),
            "uzletiInfo": obj.get("uzletiInfo"),
            "kesesInfo": obj.get("kesesInfo")
        })
        return _obj


