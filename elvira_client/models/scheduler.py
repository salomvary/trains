# coding: utf-8

"""
    MÁV ELVIRA API

    Unofficial API for MÁV ELVIRA - Hungarian Railways (jegy.mav.hu)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from elvira_client.models.havarian_infok import HavarianInfok
from elvira_client.models.kind import Kind
from elvira_client.models.modality import Modality
from elvira_client.models.relation_symbol import RelationSymbol
from elvira_client.models.service import Service
from elvira_client.models.station import Station
from elvira_client.models.viszonylat_object import ViszonylatObject
from typing import Optional, Set
from typing_extensions import Self

class Scheduler(BaseModel):
    """
    Scheduler
    """ # noqa: E501
    aggregated_service_ids: List[Optional[StrictStr]] = Field(alias="aggregatedServiceIds")
    name: Optional[StrictStr] = Field(description="Name of the train, present for some international trains")
    seat_reservation_code: StrictStr = Field(alias="seatReservationCode")
    code: Annotated[str, Field(min_length=2, strict=True, max_length=5)] = Field(description="Train number")
    company_code: Optional[StrictStr] = Field(alias="companyCode")
    route: Optional[StrictStr]
    start_station_reservation_code: Optional[StrictStr] = Field(alias="startStationReservationCode")
    end_station_reservation_code: Optional[StrictStr] = Field(alias="endStationReservationCode")
    start_station: Station = Field(alias="startStation")
    end_station: Station = Field(alias="endStation")
    start_date: datetime = Field(alias="startDate")
    orig_start_station: Optional[StrictStr] = Field(alias="origStartStation")
    orig_end_station: Optional[StrictStr] = Field(alias="origEndStation")
    start: Optional[datetime] = Field(description="Scheduled departure time at the current station")
    virtual_start: StrictBool = Field(alias="virtualStart")
    arrive: Optional[datetime] = Field(description="Scheduled arrival time at the current station")
    modality: Modality
    virtual_arrive: StrictBool = Field(alias="virtualArrive")
    distance: Union[StrictFloat, StrictInt]
    closed_track_way: StrictBool = Field(alias="closedTrackWay")
    full_name: StrictStr = Field(alias="fullName")
    kinds: List[Kind]
    kinds_to_display: List[Kind] = Field(alias="kindsToDisplay")
    kind: Kind
    services: List[Service]
    actual_or_estimated_start: Optional[StrictStr] = Field(description="Actual or estimated departure time at the current station, including delays", alias="actualOrEstimatedStart")
    actual_or_estimated_arrive: Optional[StrictStr] = Field(description="Actual or estimated arrival time at the current station, including delays", alias="actualOrEstimatedArrive")
    havarian_infok: HavarianInfok = Field(alias="havarianInfok")
    direct_trains: Optional[StrictStr] = Field(alias="directTrains")
    carrier_trains: Optional[StrictStr] = Field(alias="carrierTrains")
    start_track: Optional[StrictStr] = Field(alias="startTrack")
    start_track_type: Optional[StrictStr] = Field(alias="startTrackType")
    end_track: Optional[StrictStr] = Field(alias="endTrack")
    end_track_type: Optional[StrictStr] = Field(alias="endTrackType")
    je_eszkoz_alap_id: Union[StrictFloat, StrictInt] = Field(alias="jeEszkozAlapId")
    full_type: Optional[StrictStr] = Field(alias="fullType")
    full_short_type: StrictStr = Field(alias="fullShortType")
    footer: Optional[StrictStr]
    viszonylati_jel: Optional[RelationSymbol] = Field(alias="viszonylatiJel")
    viszonylat_object: ViszonylatObject = Field(alias="viszonylatObject")
    description: Optional[StrictStr]
    same_car: StrictBool = Field(alias="sameCar")
    start_time_zone: Optional[StrictStr] = Field(alias="startTimeZone")
    arrive_time_zone: Optional[StrictStr] = Field(alias="arriveTimeZone")
    train_id: StrictStr = Field(description="Unique identifier the train within a day", alias="trainId")
    __properties: ClassVar[List[str]] = ["aggregatedServiceIds", "name", "seatReservationCode", "code", "companyCode", "route", "startStationReservationCode", "endStationReservationCode", "startStation", "endStation", "startDate", "origStartStation", "origEndStation", "start", "virtualStart", "arrive", "modality", "virtualArrive", "distance", "closedTrackWay", "fullName", "kinds", "kindsToDisplay", "kind", "services", "actualOrEstimatedStart", "actualOrEstimatedArrive", "havarianInfok", "directTrains", "carrierTrains", "startTrack", "startTrackType", "endTrack", "endTrackType", "jeEszkozAlapId", "fullType", "fullShortType", "footer", "viszonylatiJel", "viszonylatObject", "description", "sameCar", "startTimeZone", "arriveTimeZone", "trainId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Scheduler from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of start_station
        if self.start_station:
            _dict['startStation'] = self.start_station.to_dict()
        # override the default output from pydantic by calling `to_dict()` of end_station
        if self.end_station:
            _dict['endStation'] = self.end_station.to_dict()
        # override the default output from pydantic by calling `to_dict()` of modality
        if self.modality:
            _dict['modality'] = self.modality.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in kinds (list)
        _items = []
        if self.kinds:
            for _item_kinds in self.kinds:
                if _item_kinds:
                    _items.append(_item_kinds.to_dict())
            _dict['kinds'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in kinds_to_display (list)
        _items = []
        if self.kinds_to_display:
            for _item_kinds_to_display in self.kinds_to_display:
                if _item_kinds_to_display:
                    _items.append(_item_kinds_to_display.to_dict())
            _dict['kindsToDisplay'] = _items
        # override the default output from pydantic by calling `to_dict()` of kind
        if self.kind:
            _dict['kind'] = self.kind.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in services (list)
        _items = []
        if self.services:
            for _item_services in self.services:
                if _item_services:
                    _items.append(_item_services.to_dict())
            _dict['services'] = _items
        # override the default output from pydantic by calling `to_dict()` of havarian_infok
        if self.havarian_infok:
            _dict['havarianInfok'] = self.havarian_infok.to_dict()
        # override the default output from pydantic by calling `to_dict()` of viszonylati_jel
        if self.viszonylati_jel:
            _dict['viszonylatiJel'] = self.viszonylati_jel.to_dict()
        # override the default output from pydantic by calling `to_dict()` of viszonylat_object
        if self.viszonylat_object:
            _dict['viszonylatObject'] = self.viszonylat_object.to_dict()
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if company_code (nullable) is None
        # and model_fields_set contains the field
        if self.company_code is None and "company_code" in self.model_fields_set:
            _dict['companyCode'] = None

        # set to None if route (nullable) is None
        # and model_fields_set contains the field
        if self.route is None and "route" in self.model_fields_set:
            _dict['route'] = None

        # set to None if start_station_reservation_code (nullable) is None
        # and model_fields_set contains the field
        if self.start_station_reservation_code is None and "start_station_reservation_code" in self.model_fields_set:
            _dict['startStationReservationCode'] = None

        # set to None if end_station_reservation_code (nullable) is None
        # and model_fields_set contains the field
        if self.end_station_reservation_code is None and "end_station_reservation_code" in self.model_fields_set:
            _dict['endStationReservationCode'] = None

        # set to None if orig_start_station (nullable) is None
        # and model_fields_set contains the field
        if self.orig_start_station is None and "orig_start_station" in self.model_fields_set:
            _dict['origStartStation'] = None

        # set to None if orig_end_station (nullable) is None
        # and model_fields_set contains the field
        if self.orig_end_station is None and "orig_end_station" in self.model_fields_set:
            _dict['origEndStation'] = None

        # set to None if start (nullable) is None
        # and model_fields_set contains the field
        if self.start is None and "start" in self.model_fields_set:
            _dict['start'] = None

        # set to None if arrive (nullable) is None
        # and model_fields_set contains the field
        if self.arrive is None and "arrive" in self.model_fields_set:
            _dict['arrive'] = None

        # set to None if actual_or_estimated_start (nullable) is None
        # and model_fields_set contains the field
        if self.actual_or_estimated_start is None and "actual_or_estimated_start" in self.model_fields_set:
            _dict['actualOrEstimatedStart'] = None

        # set to None if actual_or_estimated_arrive (nullable) is None
        # and model_fields_set contains the field
        if self.actual_or_estimated_arrive is None and "actual_or_estimated_arrive" in self.model_fields_set:
            _dict['actualOrEstimatedArrive'] = None

        # set to None if direct_trains (nullable) is None
        # and model_fields_set contains the field
        if self.direct_trains is None and "direct_trains" in self.model_fields_set:
            _dict['directTrains'] = None

        # set to None if carrier_trains (nullable) is None
        # and model_fields_set contains the field
        if self.carrier_trains is None and "carrier_trains" in self.model_fields_set:
            _dict['carrierTrains'] = None

        # set to None if start_track (nullable) is None
        # and model_fields_set contains the field
        if self.start_track is None and "start_track" in self.model_fields_set:
            _dict['startTrack'] = None

        # set to None if start_track_type (nullable) is None
        # and model_fields_set contains the field
        if self.start_track_type is None and "start_track_type" in self.model_fields_set:
            _dict['startTrackType'] = None

        # set to None if end_track (nullable) is None
        # and model_fields_set contains the field
        if self.end_track is None and "end_track" in self.model_fields_set:
            _dict['endTrack'] = None

        # set to None if end_track_type (nullable) is None
        # and model_fields_set contains the field
        if self.end_track_type is None and "end_track_type" in self.model_fields_set:
            _dict['endTrackType'] = None

        # set to None if full_type (nullable) is None
        # and model_fields_set contains the field
        if self.full_type is None and "full_type" in self.model_fields_set:
            _dict['fullType'] = None

        # set to None if footer (nullable) is None
        # and model_fields_set contains the field
        if self.footer is None and "footer" in self.model_fields_set:
            _dict['footer'] = None

        # set to None if viszonylati_jel (nullable) is None
        # and model_fields_set contains the field
        if self.viszonylati_jel is None and "viszonylati_jel" in self.model_fields_set:
            _dict['viszonylatiJel'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if start_time_zone (nullable) is None
        # and model_fields_set contains the field
        if self.start_time_zone is None and "start_time_zone" in self.model_fields_set:
            _dict['startTimeZone'] = None

        # set to None if arrive_time_zone (nullable) is None
        # and model_fields_set contains the field
        if self.arrive_time_zone is None and "arrive_time_zone" in self.model_fields_set:
            _dict['arriveTimeZone'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Scheduler from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "aggregatedServiceIds": obj.get("aggregatedServiceIds"),
            "name": obj.get("name"),
            "seatReservationCode": obj.get("seatReservationCode"),
            "code": obj.get("code"),
            "companyCode": obj.get("companyCode"),
            "route": obj.get("route"),
            "startStationReservationCode": obj.get("startStationReservationCode"),
            "endStationReservationCode": obj.get("endStationReservationCode"),
            "startStation": Station.from_dict(obj["startStation"]) if obj.get("startStation") is not None else None,
            "endStation": Station.from_dict(obj["endStation"]) if obj.get("endStation") is not None else None,
            "startDate": obj.get("startDate"),
            "origStartStation": obj.get("origStartStation"),
            "origEndStation": obj.get("origEndStation"),
            "start": obj.get("start"),
            "virtualStart": obj.get("virtualStart"),
            "arrive": obj.get("arrive"),
            "modality": Modality.from_dict(obj["modality"]) if obj.get("modality") is not None else None,
            "virtualArrive": obj.get("virtualArrive"),
            "distance": obj.get("distance"),
            "closedTrackWay": obj.get("closedTrackWay"),
            "fullName": obj.get("fullName"),
            "kinds": [Kind.from_dict(_item) for _item in obj["kinds"]] if obj.get("kinds") is not None else None,
            "kindsToDisplay": [Kind.from_dict(_item) for _item in obj["kindsToDisplay"]] if obj.get("kindsToDisplay") is not None else None,
            "kind": Kind.from_dict(obj["kind"]) if obj.get("kind") is not None else None,
            "services": [Service.from_dict(_item) for _item in obj["services"]] if obj.get("services") is not None else None,
            "actualOrEstimatedStart": obj.get("actualOrEstimatedStart"),
            "actualOrEstimatedArrive": obj.get("actualOrEstimatedArrive"),
            "havarianInfok": HavarianInfok.from_dict(obj["havarianInfok"]) if obj.get("havarianInfok") is not None else None,
            "directTrains": obj.get("directTrains"),
            "carrierTrains": obj.get("carrierTrains"),
            "startTrack": obj.get("startTrack"),
            "startTrackType": obj.get("startTrackType"),
            "endTrack": obj.get("endTrack"),
            "endTrackType": obj.get("endTrackType"),
            "jeEszkozAlapId": obj.get("jeEszkozAlapId"),
            "fullType": obj.get("fullType"),
            "fullShortType": obj.get("fullShortType"),
            "footer": obj.get("footer"),
            "viszonylatiJel": RelationSymbol.from_dict(obj["viszonylatiJel"]) if obj.get("viszonylatiJel") is not None else None,
            "viszonylatObject": ViszonylatObject.from_dict(obj["viszonylatObject"]) if obj.get("viszonylatObject") is not None else None,
            "description": obj.get("description"),
            "sameCar": obj.get("sameCar"),
            "startTimeZone": obj.get("startTimeZone"),
            "arriveTimeZone": obj.get("arriveTimeZone"),
            "trainId": obj.get("trainId")
        })
        return _obj


