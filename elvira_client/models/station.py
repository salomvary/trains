# coding: utf-8

"""
    MÁV ELVIRA API

    Unofficial API for MÁV ELVIRA - Hungarian Railways (jegy.mav.hu)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from elvira_client.models.modality import Modality
from typing import Optional, Set
from typing_extensions import Self

class Station(BaseModel):
    """
    Station
    """ # noqa: E501
    id: Union[StrictFloat, StrictInt]
    is_alias: StrictBool = Field(alias="isAlias")
    name: StrictStr
    code: StrictStr
    base_code: Optional[StrictStr] = Field(alias="baseCode")
    is_international: StrictBool = Field(alias="isInternational")
    can_use_for_offer_request: StrictBool = Field(alias="canUseForOfferRequest")
    can_use_for_passenger_information: Optional[StrictBool] = Field(default=None, alias="canUseForPassengerInformation")
    country: Optional[StrictStr]
    coutry_iso: Optional[StrictStr] = Field(alias="coutryIso")
    modalities: Optional[List[Modality]] = None
    name_without_comma: StrictStr = Field(alias="nameWithoutComma")
    is_in108_1: StrictBool = Field(alias="isIn108_1")
    __properties: ClassVar[List[str]] = ["id", "isAlias", "name", "code", "baseCode", "isInternational", "canUseForOfferRequest", "canUseForPassengerInformation", "country", "coutryIso", "modalities", "nameWithoutComma", "isIn108_1"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Station from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in modalities (list)
        _items = []
        if self.modalities:
            for _item_modalities in self.modalities:
                if _item_modalities:
                    _items.append(_item_modalities.to_dict())
            _dict['modalities'] = _items
        # set to None if base_code (nullable) is None
        # and model_fields_set contains the field
        if self.base_code is None and "base_code" in self.model_fields_set:
            _dict['baseCode'] = None

        # set to None if country (nullable) is None
        # and model_fields_set contains the field
        if self.country is None and "country" in self.model_fields_set:
            _dict['country'] = None

        # set to None if coutry_iso (nullable) is None
        # and model_fields_set contains the field
        if self.coutry_iso is None and "coutry_iso" in self.model_fields_set:
            _dict['coutryIso'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Station from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "isAlias": obj.get("isAlias"),
            "name": obj.get("name"),
            "code": obj.get("code"),
            "baseCode": obj.get("baseCode"),
            "isInternational": obj.get("isInternational"),
            "canUseForOfferRequest": obj.get("canUseForOfferRequest"),
            "canUseForPassengerInformation": obj.get("canUseForPassengerInformation"),
            "country": obj.get("country"),
            "coutryIso": obj.get("coutryIso"),
            "modalities": [Modality.from_dict(_item) for _item in obj["modalities"]] if obj.get("modalities") is not None else None,
            "nameWithoutComma": obj.get("nameWithoutComma"),
            "isIn108_1": obj.get("isIn108_1")
        })
        return _obj


