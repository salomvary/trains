# coding: utf-8

"""
    MÁV ELVIRA API

    Unofficial API for MÁV ELVIRA - Hungarian Railways (jegy.mav.hu)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from elvira_client.models.modality_sign import ModalitySign
from typing import Optional, Set
from typing_extensions import Self

class Modality(BaseModel):
    """
    Modality
    """ # noqa: E501
    code: Union[StrictFloat, StrictInt]
    name: Optional[Any]
    description: Optional[Any]
    order: Union[StrictFloat, StrictInt]
    is_default: StrictBool = Field(alias="isDefault")
    default_color: StrictStr = Field(alias="defaultColor")
    ink_color: StrictStr = Field(alias="inkColor")
    sign: ModalitySign
    foreign_names: Optional[Any] = Field(alias="foreignNames")
    foreign_descriptions: Optional[Any] = Field(alias="foreignDescriptions")
    __properties: ClassVar[List[str]] = ["code", "name", "description", "order", "isDefault", "defaultColor", "inkColor", "sign", "foreignNames", "foreignDescriptions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Modality from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of sign
        if self.sign:
            _dict['sign'] = self.sign.to_dict()
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if foreign_names (nullable) is None
        # and model_fields_set contains the field
        if self.foreign_names is None and "foreign_names" in self.model_fields_set:
            _dict['foreignNames'] = None

        # set to None if foreign_descriptions (nullable) is None
        # and model_fields_set contains the field
        if self.foreign_descriptions is None and "foreign_descriptions" in self.model_fields_set:
            _dict['foreignDescriptions'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Modality from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "code": obj.get("code"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "order": obj.get("order"),
            "isDefault": obj.get("isDefault"),
            "defaultColor": obj.get("defaultColor"),
            "inkColor": obj.get("inkColor"),
            "sign": ModalitySign.from_dict(obj["sign"]) if obj.get("sign") is not None else None,
            "foreignNames": obj.get("foreignNames"),
            "foreignDescriptions": obj.get("foreignDescriptions")
        })
        return _obj


