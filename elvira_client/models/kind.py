# coding: utf-8

"""
    MÁV ELVIRA API

    Unofficial API for MÁV ELVIRA - Hungarian Railways (jegy.mav.hu)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from elvira_client.models.sign import Sign
from elvira_client.models.station import Station
from typing import Optional, Set
from typing_extensions import Self

class Kind(BaseModel):
    """
    Kind
    """ # noqa: E501
    name: StrictStr
    sort_name: Optional[StrictStr] = Field(alias="sortName")
    code: StrictStr
    priority: StrictInt
    background_color_code: StrictStr = Field(alias="backgroundColorCode")
    foreground_color_code: StrictStr = Field(alias="foregroundColorCode")
    sign: Sign
    start_station: Station = Field(alias="startStation")
    end_station: Station = Field(alias="endStation")
    __properties: ClassVar[List[str]] = ["name", "sortName", "code", "priority", "backgroundColorCode", "foregroundColorCode", "sign", "startStation", "endStation"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Kind from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of sign
        if self.sign:
            _dict['sign'] = self.sign.to_dict()
        # override the default output from pydantic by calling `to_dict()` of start_station
        if self.start_station:
            _dict['startStation'] = self.start_station.to_dict()
        # override the default output from pydantic by calling `to_dict()` of end_station
        if self.end_station:
            _dict['endStation'] = self.end_station.to_dict()
        # set to None if sort_name (nullable) is None
        # and model_fields_set contains the field
        if self.sort_name is None and "sort_name" in self.model_fields_set:
            _dict['sortName'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Kind from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "sortName": obj.get("sortName"),
            "code": obj.get("code"),
            "priority": obj.get("priority"),
            "backgroundColorCode": obj.get("backgroundColorCode"),
            "foregroundColorCode": obj.get("foregroundColorCode"),
            "sign": Sign.from_dict(obj["sign"]) if obj.get("sign") is not None else None,
            "startStation": Station.from_dict(obj["startStation"]) if obj.get("startStation") is not None else None,
            "endStation": Station.from_dict(obj["endStation"]) if obj.get("endStation") is not None else None
        })
        return _obj


