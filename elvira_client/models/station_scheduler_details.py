# coding: utf-8

"""
    MÁV ELVIRA API

    Unofficial API for MÁV ELVIRA - Hungarian Railways (jegy.mav.hu)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from elvira_client.models.scheduler import Scheduler
from elvira_client.models.service import Service
from elvira_client.models.station import Station
from typing import Optional, Set
from typing_extensions import Self

class StationSchedulerDetails(BaseModel):
    """
    StationSchedulerDetails
    """ # noqa: E501
    station: Station
    arrival_scheduler: List[Scheduler] = Field(alias="arrivalScheduler")
    departure_scheduler: List[Scheduler] = Field(alias="departureScheduler")
    services: List[Service]
    more_result: StrictBool = Field(alias="moreResult")
    havaria_infos: List[Optional[StrictStr]] = Field(alias="havariaInfos")
    __properties: ClassVar[List[str]] = ["station", "arrivalScheduler", "departureScheduler", "services", "moreResult", "havariaInfos"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StationSchedulerDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of station
        if self.station:
            _dict['station'] = self.station.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in arrival_scheduler (list)
        _items = []
        if self.arrival_scheduler:
            for _item_arrival_scheduler in self.arrival_scheduler:
                if _item_arrival_scheduler:
                    _items.append(_item_arrival_scheduler.to_dict())
            _dict['arrivalScheduler'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in departure_scheduler (list)
        _items = []
        if self.departure_scheduler:
            for _item_departure_scheduler in self.departure_scheduler:
                if _item_departure_scheduler:
                    _items.append(_item_departure_scheduler.to_dict())
            _dict['departureScheduler'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in services (list)
        _items = []
        if self.services:
            for _item_services in self.services:
                if _item_services:
                    _items.append(_item_services.to_dict())
            _dict['services'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StationSchedulerDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "station": Station.from_dict(obj["station"]) if obj.get("station") is not None else None,
            "arrivalScheduler": [Scheduler.from_dict(_item) for _item in obj["arrivalScheduler"]] if obj.get("arrivalScheduler") is not None else None,
            "departureScheduler": [Scheduler.from_dict(_item) for _item in obj["departureScheduler"]] if obj.get("departureScheduler") is not None else None,
            "services": [Service.from_dict(_item) for _item in obj["services"]] if obj.get("services") is not None else None,
            "moreResult": obj.get("moreResult"),
            "havariaInfos": obj.get("havariaInfos")
        })
        return _obj


